#include <iostream>
#include <bits/stdc++.h>
using namespace std;
#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)
#define MOD 1000000007
#define MOD1 998244353
#define INF 1e18
#define  p_q priority_queue
#define nline "\n"
#define pb push_back
#define ppb pop_back
// cin , front , back ,
#define mp make_pair
#define ff first
#define ss second
#define PI 3.141592653589793238462
#define set_bits __builtin_popcountll
#define sz(x) ((int)(x).size())
#define all(x) (x).begin(), (x).end()
typedef long long ll;
typedef unsigned long long ull;
typedef long double lld;
// #ifndef ONLINE_JUDGE
#define debug(x) cout<<#x <<" ";_print(x);cout<< endl;
// #else
// #define debug(x)
// #endif
void _print( int a) {cout << a ;}
void _print( long long a) {cout << a ;}
void _print( char a) {cout << a ;}
void _print( string a) {cout << a ;}
void _print( bool a) {cout << a ;}
template <class T> void _print(vector<T> v) {cout << "[ "; for (T i : v) {_print(i); cout << " ";} cout << "]";}
template <class T> void _print(set<T> s) {cout << "[ "; for (T i : s) {_print(i); cout << " ";} cout << "]";}
template <class T, class V> void _print(pair <T, V> p) {cout << "{"; _print(p.first); cout << ","; _print(p.second); cout << "}";}
template <class T, class V> void _print(map <T, V> v) { cout << "[ "; for (auto i : v) {_print(i); cout << " ";} cout << "]";}
template <class T, class V> void _print(unordered_map <T, V> v) { cout << "[ "; for (auto i : v) {_print(i); cout << " ";} cout << "]";}

#define forn(i, n) for (int i = 0; i < int(n); i++)
string num_to_str(ll num) {            return to_string(num);  }
ll str_to_num(string s) {            stringstream pk(s);   ll num; pk >> num;            return num;}
ll max_for_Long_Long (ll a, ll b ) {   return a > b ? a : b;           }
ll   noOfSetBits(ll  val) {
    ll  count = 0; while (val > 0 ) {
        // accumulate
        ll   rightmostbitMask = val & ( (~val) + 1) ; if (rightmostbitMask > 0 ) {count++;} val = val - rightmostbitMask;
    } return count;
}
ll accumulateforlonglong(vector<int > &arr ) {ll sum = 0; for (auto x : arr) {sum += x;}          return sum;}

long long mxElemntIndex( vector<ll> &arr  ) {
    long long  i = 1;
    long long indx = -1;
    long long mx = LLONG_MIN;
    for (   ; i < arr.size() ; i++ ) {
        if ( arr[i] > mx ) {
            mx = arr[i];
            indx = i;
        }
    }
    return indx;
}
void printPairsInVectors( vector<  pair < int, int >   > a ) {
    cout << endl;
    cout << "[ ";
    for (auto x : a)
    {
        cout << "{ " << x .first << " " << x.second << " } ";
    }
    cout << " ]";
    cout << endl;

}
void input(vector<ll> &arr , ll n) {
    ll val;
    for (int i = 0 ; i < n ; i++) {
        cin >> val;
        arr.push_back(val);
    }
}
ll kadaneAlgo(vector<ll> &arr){
    ll n = arr.size();
    ll mx = arr[0];
    ll sm = arr[0];
    for( ll i = 1 ; i < n ; i++ ){
       sm = max(arr[i] , arr[i] + sm);
         if( sm > mx ){
           mx = sm;
       }
}
   return mx; 
}


#define l(i,s,e) for(long long int i=s;i<e;i++)
#define le(i,s,e) for(long long int i=s;i<=e;i++)
#define rle(i,e,s) for(long long int i=e-1;i>=s;i--)
// stoi(bin is variable of string of binary , nullptr,  2  );  <--- convert binary to decimal 
// bitset<1>(n).to_string(); convert integer to binary
// lower_bound
// #define queue
// define deque
// define unordered_map


void solve()
{
    ll n;
    cin >> n;

    vector<ll>  A;
    vector<ll>  B;
    input( , n );
    input(arr , n );





}



int main() {
// #ifndef ONLINE_JUDGE
//     freopen("Error.txt", "w", stderr);
// #endif
// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
// #endif
    ll t;
    cin >> t;
    while (t--)
    {

        solve();
    }

    return 0;
}

// Techniques :
// divide into cases, brute force, pattern finding
// sort, greedy, binary search, two pointer
// transform into graph

// Experience :
// Cp is nothing but only observation and mathematics.

/* -----------------END OF PROGRAM --------------------*/
/*
* stuff you should look before submission
* constraint and time limit
* int overflow
* special test case (n=0||n=1||n=2)
* don't get stuck on one approach if you get wrong answer
*/
